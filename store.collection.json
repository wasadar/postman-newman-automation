{
	"info": {
		"_postman_id": "7d77e8cf-b046-4bd6-9bfc-252d8b8c32df",
		"name": "store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31402283"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "List products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"})\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response data has valid fromat\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function (item) {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item.id).to.be.a(\"number\");\r",
									"\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item.name).to.be.a(\"string\");\r",
									"\r",
									"        pm.expect(item).to.have.property(\"price\");\r",
									"        pm.expect(item.price).to.be.a(\"number\");\r",
									"\r",
									"        pm.expect(item).to.have.property(\"sku\");\r",
									"        pm.expect(item.sku).to.be.a(\"number\");\r",
									"        \r",
									"        pm.expect(item).to.have.property(\"description\");\r",
									"        pm.expect(item.description).to.be.a(\"string\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "List products pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response data has expected length\", function () {\r",
									"    pm.expect(pm.response.json().length).to.equal(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?page=1&pageSize=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List products sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response data sorted by expected way\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    const sortedNames = jsonData.map(item => item.name);\r",
									"    const isSorted = sortedNames.every((value, index, array) => index === 0 || value >= array[index - 1]);\r",
									"    \r",
									"    pm.expect(isSorted).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?sortOrder=ASC&sortKey=name",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response data has valid format\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"price\");\r",
									"    pm.expect(jsonData.price).to.be.a(\"number\");\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"sku\");\r",
									"    pm.expect(jsonData.sku).to.be.a(\"number\");\r",
									"    \r",
									"    pm.expect(jsonData).to.have.property(\"description\");\r",
									"    pm.expect(jsonData.description).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get unexisting product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response data matches input\", function () {\r",
									"    const expectedData = {\r",
									"        \"name\": \"orange\",\r",
									"        \"price\": 8,\r",
									"        \"sku\": 123321123,\r",
									"        \"description\": \"wouh\"\r",
									"    };\r",
									"\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property(\"name\", expectedData.name);\r",
									"    pm.expect(responseData).to.have.property(\"price\", expectedData.price);\r",
									"    pm.expect(responseData).to.have.property(\"sku\", expectedData.sku);\r",
									"    pm.expect(responseData).to.have.property(\"description\", expectedData.description);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"orange\",\r\n    \"price\": 8,\r\n    \"sku\": 123321123,\r\n    \"description\": \"wouh\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Updated data matches input\", function () {\r",
									"    const expectedData = {\r",
									"        \"id\": 4,\r",
									"        \"name\": \"banana\",\r",
									"        \"price\": 155,\r",
									"        \"sku\": 123321123,\r",
									"        \"description\": \"changed description\"\r",
									"    };\r",
									"\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property(\"id\", expectedData.id);\r",
									"    pm.expect(responseData).to.have.property(\"name\", expectedData.name);\r",
									"    pm.expect(responseData).to.have.property(\"price\", expectedData.price);\r",
									"    pm.expect(responseData).to.have.property(\"sku\", expectedData.sku);\r",
									"    pm.expect(responseData).to.have.property(\"description\", expectedData.description);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"banana\",\r\n    \"price\": 155,\r\n    \"sku\": 123321123,\r\n    \"description\": \"changed description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deleted data matches expected\", function () {\r",
									"    const expectedData = {\r",
									"        \"id\": 4,\r",
									"        \"name\": \"banana\",\r",
									"        \"price\": 155,\r",
									"        \"sku\": 123321123,\r",
									"        \"description\": \"changed description\"\r",
									"    };\r",
									"\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property(\"id\", expectedData.id);\r",
									"    pm.expect(responseData).to.have.property(\"name\", expectedData.name);\r",
									"    pm.expect(responseData).to.have.property(\"price\", expectedData.price);\r",
									"    pm.expect(responseData).to.have.property(\"sku\", expectedData.sku);\r",
									"    pm.expect(responseData).to.have.property(\"description\", expectedData.description);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get removed product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "List orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"})\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response data has valid fromat\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function (item) {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item.id).to.be.a(\"number\");\r",
									"\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item.name).to.be.a(\"string\");\r",
									"        \r",
									"        pm.expect(item).to.have.property(\"sku\");\r",
									"        pm.expect(item.sku).to.be.a(\"number\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "List orders pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response data has expected length\", function () {\r",
									"    pm.expect(pm.response.json().length).to.equal(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders?page=1&pageSize=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List orders sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response data sorted by expected way\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    const sortedNames = jsonData.map(item => item.name);\r",
									"    const isSorted = sortedNames.every((value, index, array) => index === 0 || value >= array[index - 1]);\r",
									"    \r",
									"    pm.expect(isSorted).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders?sortOrder=ASC&sortKey=name",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response data has valid format\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"    \r",
									"    pm.expect(jsonData).to.have.property(\"sku\");\r",
									"    pm.expect(jsonData.sku).to.be.a(\"number\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get unexisting order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response data matches input\", function () {\r",
									"    const expectedData = {\r",
									"        \"name\": \"order5\",\r",
									"        \"sku\": 123425445656765\r",
									"    };\r",
									"\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property(\"name\", expectedData.name);\r",
									"    pm.expect(responseData).to.have.property(\"sku\", expectedData.sku);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Updated data matches input\", function () {\r",
									"    const expectedData = {\r",
									"        \"id\": 4,\r",
									"        \"name\": \"order5\",\r",
									"        \"sku\": 123425445656765\r",
									"    };\r",
									"\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property(\"id\", expectedData.id);\r",
									"    pm.expect(responseData).to.have.property(\"name\", expectedData.name);\r",
									"    pm.expect(responseData).to.have.property(\"sku\", expectedData.sku);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deleted data matches expected\", function () {\r",
									"        const expectedData = {\r",
									"        \"id\": 4,\r",
									"        \"name\": \"order5\",\r",
									"        \"sku\": 123425445656765\r",
									"    };\r",
									"\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property(\"id\", expectedData.id);\r",
									"    pm.expect(responseData).to.have.property(\"name\", expectedData.name);\r",
									"    pm.expect(responseData).to.have.property(\"sku\", expectedData.sku);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get removed order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "List users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response data has valid format\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function (item) {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item.id).to.be.a(\"number\");\r",
									"\r",
									"        pm.expect(item).to.have.property(\"firstName\");\r",
									"        pm.expect(item.firstName).to.be.a(\"string\");\r",
									"\r",
									"        pm.expect(item).to.have.property(\"lastName\");\r",
									"        pm.expect(item.lastName).to.be.a(\"string\");\r",
									"\r",
									"        pm.expect(item).to.have.property(\"email\");\r",
									"        pm.expect(item.email).to.be.a(\"string\");\r",
									"\r",
									"        pm.expect(item).to.have.property(\"dateOfBirth\");\r",
									"        pm.expect(item.dateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"\r",
									"        pm.expect(item).to.have.property(\"emailVerified\");\r",
									"        pm.expect(item.emailVerified).to.be.a(\"boolean\");\r",
									"\r",
									"        pm.expect(item).to.have.property(\"signUpDate\");\r",
									"        pm.expect(item.signUpDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"\r",
									"        pm.expect(item).to.have.property(\"status\");\r",
									"        pm.expect(item.status).to.be.a(\"string\");\r",
									"\r",
									"        pm.expect(item).to.have.property(\"level\");\r",
									"        pm.expect(item.level).to.be.a(\"string\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "List users pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response data has expected length\", function () {\r",
									"    pm.expect(pm.response.json().length).to.equal(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?page=1&pageSize=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List users sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response data sorted by expected way\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    const sortedNames = jsonData.map(item => item.firstName);\r",
									"    const isSorted = sortedNames.every((value, index, array) => index === 0 || value >= array[index - 1]);\r",
									"    \r",
									"    pm.expect(isSorted).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?sortOrder=ASC&sortKey=firstName",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "firstName"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response data has valid format\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"firstName\");\r",
									"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"lastName\");\r",
									"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"email\");\r",
									"    pm.expect(jsonData.email).to.be.a(\"string\");\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"dateOfBirth\");\r",
									"    pm.expect(jsonData.dateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"emailVerified\");\r",
									"    pm.expect(jsonData.emailVerified).to.be.a(\"boolean\");\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"signUpDate\");\r",
									"    pm.expect(jsonData.signUpDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"level\");\r",
									"    pm.expect(jsonData.level).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get unexisting user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response data matches input\", function () {\r",
									"    const expectedData = {\r",
									"        \"firstName\": \"Dream\",\r",
									"        \"lastName\": \"Real\",\r",
									"        \"email\": \"dream.real@gmail.com\",\r",
									"        \"dateOfBirth\": \"2001-10-99\",\r",
									"        \"emailVerified\": true,\r",
									"        \"signUpDate\": \"2019-08-24\",\r",
									"        \"status\": \"active\",\r",
									"        \"level\": \"lord\"\r",
									"    };\r",
									"\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property(\"firstName\", expectedData.firstName);\r",
									"    pm.expect(responseData).to.have.property(\"lastName\", expectedData.lastName);\r",
									"    pm.expect(responseData).to.have.property(\"email\", expectedData.email);\r",
									"    pm.expect(responseData).to.have.property(\"dateOfBirth\", expectedData.dateOfBirth);\r",
									"    pm.expect(responseData).to.have.property(\"emailVerified\", expectedData.emailVerified);\r",
									"    pm.expect(responseData).to.have.property(\"signUpDate\", expectedData.signUpDate);\r",
									"    pm.expect(responseData).to.have.property(\"status\", expectedData.status);\r",
									"    pm.expect(responseData).to.have.property(\"level\", expectedData.level);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Dream\",\r\n    \"lastName\": \"Real\",\r\n    \"email\": \"dream.real@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response data matches input\", function () {\r",
									"    const expectedData = {\r",
									"        \"firstName\": \"Ilon\",\r",
									"        \"lastName\": \"Mask\",\r",
									"        \"email\": \"ilon.mask@gmail.com\",\r",
									"        \"dateOfBirth\": \"2001-10-99\",\r",
									"        \"emailVerified\": true,\r",
									"        \"signUpDate\": \"2019-08-24\",\r",
									"        \"status\": \"active\",\r",
									"        \"level\": \"lord\",\r",
									"        \"id\": 10\r",
									"    };\r",
									"\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property(\"id\", expectedData.id);\r",
									"    pm.expect(responseData).to.have.property(\"firstName\", expectedData.firstName);\r",
									"    pm.expect(responseData).to.have.property(\"lastName\", expectedData.lastName);\r",
									"    pm.expect(responseData).to.have.property(\"email\", expectedData.email);\r",
									"    pm.expect(responseData).to.have.property(\"dateOfBirth\", expectedData.dateOfBirth);\r",
									"    pm.expect(responseData).to.have.property(\"emailVerified\", expectedData.emailVerified);\r",
									"    pm.expect(responseData).to.have.property(\"signUpDate\", expectedData.signUpDate);\r",
									"    pm.expect(responseData).to.have.property(\"status\", expectedData.status);\r",
									"    pm.expect(responseData).to.have.property(\"level\", expectedData.level);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ilon\",\r\n    \"lastName\": \"Mask\",\r\n    \"email\": \"ilon.mask@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\",\r\n    \"id\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deleted data matches expected\", function () {\r",
									"    const expectedData = {\r",
									"        \"firstName\": \"Ilon\",\r",
									"        \"lastName\": \"Mask\",\r",
									"        \"email\": \"ilon.mask@gmail.com\",\r",
									"        \"dateOfBirth\": \"2001-10-99\",\r",
									"        \"emailVerified\": true,\r",
									"        \"signUpDate\": \"2019-08-24\",\r",
									"        \"status\": \"active\",\r",
									"        \"level\": \"lord\",\r",
									"        \"id\": 10\r",
									"    };\r",
									"\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property(\"id\", expectedData.id);\r",
									"    pm.expect(responseData).to.have.property(\"firstName\", expectedData.firstName);\r",
									"    pm.expect(responseData).to.have.property(\"lastName\", expectedData.lastName);\r",
									"    pm.expect(responseData).to.have.property(\"email\", expectedData.email);\r",
									"    pm.expect(responseData).to.have.property(\"dateOfBirth\", expectedData.dateOfBirth);\r",
									"    pm.expect(responseData).to.have.property(\"emailVerified\", expectedData.emailVerified);\r",
									"    pm.expect(responseData).to.have.property(\"signUpDate\", expectedData.signUpDate);\r",
									"    pm.expect(responseData).to.have.property(\"status\", expectedData.status);\r",
									"    pm.expect(responseData).to.have.property(\"level\", expectedData.level);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get removed user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"10"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}